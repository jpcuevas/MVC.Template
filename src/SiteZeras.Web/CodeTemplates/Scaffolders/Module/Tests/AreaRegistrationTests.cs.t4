<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using <#= Model.ControllerNamespace #>;
using NUnit.Framework;
using System;
using System.Web.Mvc;
using System.Web.Routing;

namespace <#= Model.ControllerTestNamespace #>
{
    [TestFixture]
    public class <#= Model.AreaRegistration #>Tests
    {
        private <#= Model.AreaRegistration #> areaRegistration;
        private AreaRegistrationContext registrationContext;
        private RouteCollection routeCollection;

        [SetUp]
        public void SetUp()
        {
            routeCollection = new RouteCollection();
            areaRegistration = new <#= Model.AreaRegistration #>();
            registrationContext = new AreaRegistrationContext(areaRegistration.AreaName, routeCollection);

            areaRegistration.RegisterArea(registrationContext);
        }

        #region Property: AreaName

        [Test]
        public void AreaName_Is<#= Model.Area #>()
        {
            Assert.AreEqual("<#= Model.Area #>", areaRegistration.AreaName);
        }

        #endregion

        #region Method: RegisterArea(AreaRegistrationContext context)

        [Test]
        public void RegisterArea_Registers<#= Model.Area #>Route()
        {
            Route actual = registrationContext.Routes["<#= Model.Area #>"] as Route;

            CollectionAssert.AreEqual(new[] { "<#= Model.ControllerNamespace #>" }, actual.DataTokens["Namespaces"] as String[]);
            Assert.AreEqual("{area}/{controller}/{action}/{id}", actual.Url);
            Assert.AreEqual(UrlParameter.Optional, actual.Defaults["id"]);
            Assert.AreEqual("<#= Model.Area #>", actual.Constraints["area"]);
            Assert.AreEqual("<#= Model.Area #>", actual.DataTokens["area"]);
            Assert.AreEqual("<#= Model.Area #>", actual.Defaults["area"]);
            Assert.AreEqual("en", actual.Constraints["language"]);
            Assert.AreEqual("Index", actual.Defaults["action"]);
            Assert.AreEqual("en", actual.Defaults["language"]);
        }

        [Test]
        public void RegisterArea_Registers<#= Model.Area #>MultilingualRoute()
        {
            Route actual = registrationContext.Routes["<#= Model.Area #>Multilingual"] as Route;

            CollectionAssert.AreEqual(new[] { "<#= Model.ControllerNamespace #>" }, actual.DataTokens["Namespaces"] as String[]);
            Assert.AreEqual("{language}/{area}/{controller}/{action}/{id}", actual.Url);
            Assert.AreEqual(UrlParameter.Optional, actual.Defaults["id"]);
            Assert.AreEqual("<#= Model.Area #>", actual.Constraints["area"]);
            Assert.AreEqual("<#= Model.Area #>", actual.DataTokens["area"]);
            Assert.AreEqual("<#= Model.Area #>", actual.Defaults["area"]);
            Assert.AreEqual("lt", actual.Constraints["language"]);
            Assert.AreEqual("Index", actual.Defaults["action"]);
        }

        #endregion
    }
}
