<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using <#= Model.ControllerNamespace #>;
using SiteZeras.Objects;
using SiteZeras.Services;
using SiteZeras.Validators;
using NSubstitute;
using NUnit.Framework;
using System;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;

namespace <#= Model.ControllerTestNamespace #>
{
    [TestFixture]
    public class <#= Model.Controller #>Tests : AControllerTests
    {
        private <#= Model.Controller #> controller;
        private <#= Model.IValidator #> validator;
        private <#= Model.IService #> service;
        private <#= Model.View #> <#= Model.ModelName #>;

        [SetUp]
        public void SetUp()
        {
            validator = Substitute.For<<#= Model.IValidator #>>();
            service = Substitute.For<<#= Model.IService #>>();
            <#= Model.ModelName #> = new <#= Model.View #>();

            controller = Substitute.ForPartsOf<<#= Model.Controller #>>(validator, service);
            controller.ControllerContext = new ControllerContext();
            controller.ControllerContext.RouteData = new RouteData();
        }

        #region Method: Index()

        [Test]
        public void Index_Gets<#= Model.View #>s()
        {
            service.GetViews().Returns(new <#= Model.View #>[0].AsQueryable());

            Object actual = controller.Index().Model;
            Object expected = service.GetViews();

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Create()

        [Test]
        public void Create_ReturnsEmptyView()
        {
            Assert.IsNull(controller.Create().Model);
        }

        #endregion

        #region Method: Create([Bind(Exclude = "Id")] <#= Model.View #> <#= Model.ModelName #>)

        [Test]
        public void Create_ProtectsFromOverpostingId()
        {
            ProtectsFromOverpostingId(controller, "Create");
        }

        [Test]
        public void Create_ReturnsSameModelIfCanNotCreate()
        {
            validator.CanCreate(<#= Model.ModelName #>).Returns(false);

            Object actual = (controller.Create(<#= Model.ModelName #>) as ViewResult).Model;
            Object expected = <#= Model.ModelName #>;

            Assert.AreSame(expected, actual);
        }

        [Test]
        public void Create_Creates<#= Model.View #>()
        {
            validator.CanCreate(<#= Model.ModelName #>).Returns(true);

            controller.Create(<#= Model.ModelName #>);

            service.Received().Create(<#= Model.ModelName #>);
        }

        [Test]
        public void Create_AfterSuccessfulCreateRedirectsToIndexIfAuthorized()
        {
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));
            validator.CanCreate(<#= Model.ModelName #>).Returns(true);

            ActionResult expected = controller.RedirectIfAuthorized("Index");
            ActionResult actual = controller.Create(<#= Model.ModelName #>);

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Details(String id)

        [Test]
        public void Details_OnModelNotFoundRedirectsToNotFound()
        {
            service.Get<<#= Model.View #>>("").Returns((<#= Model.View #>)null);
            controller.When(sub => sub.RedirectToNotFound()).DoNotCallBase();
            controller.RedirectToNotFound().Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            Object expected = controller.RedirectToNotFound();
            Object actual = controller.Details("");

            Assert.AreSame(expected, actual);
        }

        [Test]
        public void Details_Gets<#= Model.View #>()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelName #>.Id).Returns(<#= Model.ModelName #>);

            Object actual = (controller.Details(<#= Model.ModelName #>.Id) as ViewResult).Model;
            Object expected = <#= Model.ModelName #>;

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Edit(String id)

        [Test]
        public void Edit_OnModelNotFoundRedirectsToNotFound()
        {
            service.Get<<#= Model.View #>>("").Returns((<#= Model.View #>)null);
            controller.When(sub => sub.RedirectToNotFound()).DoNotCallBase();
            controller.RedirectToNotFound().Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.RedirectToNotFound();
            ActionResult actual = controller.Edit("");

            Assert.AreSame(expected, actual);
        }

        [Test]
        public void Edit_Gets<#= Model.View #>()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelName #>.Id).Returns(<#= Model.ModelName #>);

            Object actual = (controller.Edit(<#= Model.ModelName #>.Id) as ViewResult).Model;
            Object expected = <#= Model.ModelName #>;

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Edit(<#= Model.View #> <#= Model.ModelName #>)

        [Test]
        public void Edit_ReturnsSameModelIfCanNotEdit()
        {
            validator.CanEdit(<#= Model.ModelName #>).Returns(false);

            Object actual = (controller.Edit(<#= Model.ModelName #>) as ViewResult).Model;
            Object expected = <#= Model.ModelName #>;

            Assert.AreSame(expected, actual);
        }

        [Test]
        public void Edit_Edits<#= Model.Model #>()
        {
            validator.CanEdit(<#= Model.ModelName #>).Returns(true);

            controller.Edit(<#= Model.ModelName #>);

            service.Received().Edit(<#= Model.ModelName #>);
        }

        [Test]
        public void Edit_AfterSuccessfulEditRedirectsToIndexIfAuthorized()
        {
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));
            validator.CanEdit(<#= Model.ModelName #>).Returns(true);

            ActionResult expected = controller.RedirectIfAuthorized("Index");
            ActionResult actual = controller.Edit(<#= Model.ModelName #>);

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Delete(String id)

        [Test]
        public void Delete_OnModelNotFoundRedirectsToNotFound()
        {
            service.Get<<#= Model.View #>>("").Returns((<#= Model.View #>)null);
            controller.When(sub => sub.RedirectToNotFound()).DoNotCallBase();
            controller.RedirectToNotFound().Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.RedirectToNotFound();
            ActionResult actual = controller.Delete("");

            Assert.AreSame(expected, actual);
        }

        [Test]
        public void Delete_Gets<#= Model.View #>()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelName #>.Id).Returns(<#= Model.ModelName #>);

            Object actual = (controller.Delete(<#= Model.ModelName #>.Id) as ViewResult).Model;
            Object expected = <#= Model.ModelName #>;

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: DeleteConfirmed(String id)

        [Test]
        public void DeleteConfirmed_Deletes<#= Model.View #>()
        {
            controller.DeleteConfirmed(<#= Model.ModelName #>.Id);

            service.Received().Delete(<#= Model.ModelName #>.Id);
        }

        [Test]
        public void Delete_AfterSuccessfulDeleteRedirectsToIndexIfAuthorized()
        {
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult actual = controller.DeleteConfirmed(<#= Model.ModelName #>.Id);
            ActionResult expected = controller.RedirectIfAuthorized("Index");

            Assert.AreSame(expected, actual);
        }

        #endregion
    }
}
